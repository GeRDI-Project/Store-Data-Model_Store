/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.gerdiproject.store.data.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class StoreServiceInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1472895559829125524L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StoreServiceInfo\",\"namespace\":\"de.gerdiproject.store.data.model\",\"fields\":[{\"name\":\"UID\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"provider\",\"type\":\"string\"},{\"name\":\"frontend\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"int\",\"logicalType\":\"timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StoreServiceInfo> ENCODER =
      new BinaryMessageEncoder<StoreServiceInfo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StoreServiceInfo> DECODER =
      new BinaryMessageDecoder<StoreServiceInfo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<StoreServiceInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<StoreServiceInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StoreServiceInfo>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this StoreServiceInfo to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a StoreServiceInfo from a ByteBuffer. */
  public static StoreServiceInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence UID;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence provider;
  @Deprecated public java.lang.CharSequence frontend;
  @Deprecated public int timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StoreServiceInfo() {}

  /**
   * All-args constructor.
   * @param UID The new value for UID
   * @param name The new value for name
   * @param provider The new value for provider
   * @param frontend The new value for frontend
   * @param timestamp The new value for timestamp
   */
  public StoreServiceInfo(java.lang.CharSequence UID, java.lang.CharSequence name, java.lang.CharSequence provider, java.lang.CharSequence frontend, java.lang.Integer timestamp) {
    this.UID = UID;
    this.name = name;
    this.provider = provider;
    this.frontend = frontend;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return UID;
    case 1: return name;
    case 2: return provider;
    case 3: return frontend;
    case 4: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: UID = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: provider = (java.lang.CharSequence)value$; break;
    case 3: frontend = (java.lang.CharSequence)value$; break;
    case 4: timestamp = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'UID' field.
   * @return The value of the 'UID' field.
   */
  public java.lang.CharSequence getUID() {
    return UID;
  }

  /**
   * Sets the value of the 'UID' field.
   * @param value the value to set.
   */
  public void setUID(java.lang.CharSequence value) {
    this.UID = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'provider' field.
   * @return The value of the 'provider' field.
   */
  public java.lang.CharSequence getProvider() {
    return provider;
  }

  /**
   * Sets the value of the 'provider' field.
   * @param value the value to set.
   */
  public void setProvider(java.lang.CharSequence value) {
    this.provider = value;
  }

  /**
   * Gets the value of the 'frontend' field.
   * @return The value of the 'frontend' field.
   */
  public java.lang.CharSequence getFrontend() {
    return frontend;
  }

  /**
   * Sets the value of the 'frontend' field.
   * @param value the value to set.
   */
  public void setFrontend(java.lang.CharSequence value) {
    this.frontend = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Integer getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Integer value) {
    this.timestamp = value;
  }

  /**
   * Creates a new StoreServiceInfo RecordBuilder.
   * @return A new StoreServiceInfo RecordBuilder
   */
  public static de.gerdiproject.store.data.model.StoreServiceInfo.Builder newBuilder() {
    return new de.gerdiproject.store.data.model.StoreServiceInfo.Builder();
  }

  /**
   * Creates a new StoreServiceInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StoreServiceInfo RecordBuilder
   */
  public static de.gerdiproject.store.data.model.StoreServiceInfo.Builder newBuilder(de.gerdiproject.store.data.model.StoreServiceInfo.Builder other) {
    return new de.gerdiproject.store.data.model.StoreServiceInfo.Builder(other);
  }

  /**
   * Creates a new StoreServiceInfo RecordBuilder by copying an existing StoreServiceInfo instance.
   * @param other The existing instance to copy.
   * @return A new StoreServiceInfo RecordBuilder
   */
  public static de.gerdiproject.store.data.model.StoreServiceInfo.Builder newBuilder(de.gerdiproject.store.data.model.StoreServiceInfo other) {
    return new de.gerdiproject.store.data.model.StoreServiceInfo.Builder(other);
  }

  /**
   * RecordBuilder for StoreServiceInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StoreServiceInfo>
    implements org.apache.avro.data.RecordBuilder<StoreServiceInfo> {

    private java.lang.CharSequence UID;
    private java.lang.CharSequence name;
    private java.lang.CharSequence provider;
    private java.lang.CharSequence frontend;
    private int timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.gerdiproject.store.data.model.StoreServiceInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.UID)) {
        this.UID = data().deepCopy(fields()[0].schema(), other.UID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.provider)) {
        this.provider = data().deepCopy(fields()[2].schema(), other.provider);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.frontend)) {
        this.frontend = data().deepCopy(fields()[3].schema(), other.frontend);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing StoreServiceInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(de.gerdiproject.store.data.model.StoreServiceInfo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.UID)) {
        this.UID = data().deepCopy(fields()[0].schema(), other.UID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.provider)) {
        this.provider = data().deepCopy(fields()[2].schema(), other.provider);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.frontend)) {
        this.frontend = data().deepCopy(fields()[3].schema(), other.frontend);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'UID' field.
      * @return The value.
      */
    public java.lang.CharSequence getUID() {
      return UID;
    }

    /**
      * Sets the value of the 'UID' field.
      * @param value The value of 'UID'.
      * @return This builder.
      */
    public de.gerdiproject.store.data.model.StoreServiceInfo.Builder setUID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.UID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'UID' field has been set.
      * @return True if the 'UID' field has been set, false otherwise.
      */
    public boolean hasUID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'UID' field.
      * @return This builder.
      */
    public de.gerdiproject.store.data.model.StoreServiceInfo.Builder clearUID() {
      UID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public de.gerdiproject.store.data.model.StoreServiceInfo.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public de.gerdiproject.store.data.model.StoreServiceInfo.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'provider' field.
      * @return The value.
      */
    public java.lang.CharSequence getProvider() {
      return provider;
    }

    /**
      * Sets the value of the 'provider' field.
      * @param value The value of 'provider'.
      * @return This builder.
      */
    public de.gerdiproject.store.data.model.StoreServiceInfo.Builder setProvider(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.provider = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'provider' field has been set.
      * @return True if the 'provider' field has been set, false otherwise.
      */
    public boolean hasProvider() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'provider' field.
      * @return This builder.
      */
    public de.gerdiproject.store.data.model.StoreServiceInfo.Builder clearProvider() {
      provider = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'frontend' field.
      * @return The value.
      */
    public java.lang.CharSequence getFrontend() {
      return frontend;
    }

    /**
      * Sets the value of the 'frontend' field.
      * @param value The value of 'frontend'.
      * @return This builder.
      */
    public de.gerdiproject.store.data.model.StoreServiceInfo.Builder setFrontend(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.frontend = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'frontend' field has been set.
      * @return True if the 'frontend' field has been set, false otherwise.
      */
    public boolean hasFrontend() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'frontend' field.
      * @return This builder.
      */
    public de.gerdiproject.store.data.model.StoreServiceInfo.Builder clearFrontend() {
      frontend = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Integer getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public de.gerdiproject.store.data.model.StoreServiceInfo.Builder setTimestamp(int value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public de.gerdiproject.store.data.model.StoreServiceInfo.Builder clearTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StoreServiceInfo build() {
      try {
        StoreServiceInfo record = new StoreServiceInfo();
        record.UID = fieldSetFlags()[0] ? this.UID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.provider = fieldSetFlags()[2] ? this.provider : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.frontend = fieldSetFlags()[3] ? this.frontend : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StoreServiceInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<StoreServiceInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StoreServiceInfo>
    READER$ = (org.apache.avro.io.DatumReader<StoreServiceInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
