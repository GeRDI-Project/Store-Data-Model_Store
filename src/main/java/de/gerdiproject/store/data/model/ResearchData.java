/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.gerdiproject.store.data.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ResearchData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3098909373713598201L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ResearchData\",\"namespace\":\"de.gerdiproject.store.data.model\",\"fields\":[{\"name\":\"researchDataIdentifier\",\"type\":\"string\"},{\"name\":\"researchDataURL\",\"type\":\"string\"},{\"name\":\"researchDataLabel\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ResearchData> ENCODER =
      new BinaryMessageEncoder<ResearchData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ResearchData> DECODER =
      new BinaryMessageDecoder<ResearchData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ResearchData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ResearchData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ResearchData>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ResearchData to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ResearchData from a ByteBuffer. */
  public static ResearchData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence researchDataIdentifier;
  @Deprecated public java.lang.CharSequence researchDataURL;
  @Deprecated public java.lang.CharSequence researchDataLabel;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ResearchData() {}

  /**
   * All-args constructor.
   * @param researchDataIdentifier The new value for researchDataIdentifier
   * @param researchDataURL The new value for researchDataURL
   * @param researchDataLabel The new value for researchDataLabel
   */
  public ResearchData(java.lang.CharSequence researchDataIdentifier, java.lang.CharSequence researchDataURL, java.lang.CharSequence researchDataLabel) {
    this.researchDataIdentifier = researchDataIdentifier;
    this.researchDataURL = researchDataURL;
    this.researchDataLabel = researchDataLabel;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return researchDataIdentifier;
    case 1: return researchDataURL;
    case 2: return researchDataLabel;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: researchDataIdentifier = (java.lang.CharSequence)value$; break;
    case 1: researchDataURL = (java.lang.CharSequence)value$; break;
    case 2: researchDataLabel = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'researchDataIdentifier' field.
   * @return The value of the 'researchDataIdentifier' field.
   */
  public java.lang.CharSequence getResearchDataIdentifier() {
    return researchDataIdentifier;
  }

  /**
   * Sets the value of the 'researchDataIdentifier' field.
   * @param value the value to set.
   */
  public void setResearchDataIdentifier(java.lang.CharSequence value) {
    this.researchDataIdentifier = value;
  }

  /**
   * Gets the value of the 'researchDataURL' field.
   * @return The value of the 'researchDataURL' field.
   */
  public java.lang.CharSequence getResearchDataURL() {
    return researchDataURL;
  }

  /**
   * Sets the value of the 'researchDataURL' field.
   * @param value the value to set.
   */
  public void setResearchDataURL(java.lang.CharSequence value) {
    this.researchDataURL = value;
  }

  /**
   * Gets the value of the 'researchDataLabel' field.
   * @return The value of the 'researchDataLabel' field.
   */
  public java.lang.CharSequence getResearchDataLabel() {
    return researchDataLabel;
  }

  /**
   * Sets the value of the 'researchDataLabel' field.
   * @param value the value to set.
   */
  public void setResearchDataLabel(java.lang.CharSequence value) {
    this.researchDataLabel = value;
  }

  /**
   * Creates a new ResearchData RecordBuilder.
   * @return A new ResearchData RecordBuilder
   */
  public static de.gerdiproject.store.data.model.ResearchData.Builder newBuilder() {
    return new de.gerdiproject.store.data.model.ResearchData.Builder();
  }

  /**
   * Creates a new ResearchData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ResearchData RecordBuilder
   */
  public static de.gerdiproject.store.data.model.ResearchData.Builder newBuilder(de.gerdiproject.store.data.model.ResearchData.Builder other) {
    return new de.gerdiproject.store.data.model.ResearchData.Builder(other);
  }

  /**
   * Creates a new ResearchData RecordBuilder by copying an existing ResearchData instance.
   * @param other The existing instance to copy.
   * @return A new ResearchData RecordBuilder
   */
  public static de.gerdiproject.store.data.model.ResearchData.Builder newBuilder(de.gerdiproject.store.data.model.ResearchData other) {
    return new de.gerdiproject.store.data.model.ResearchData.Builder(other);
  }

  /**
   * RecordBuilder for ResearchData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ResearchData>
    implements org.apache.avro.data.RecordBuilder<ResearchData> {

    private java.lang.CharSequence researchDataIdentifier;
    private java.lang.CharSequence researchDataURL;
    private java.lang.CharSequence researchDataLabel;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.gerdiproject.store.data.model.ResearchData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.researchDataIdentifier)) {
        this.researchDataIdentifier = data().deepCopy(fields()[0].schema(), other.researchDataIdentifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.researchDataURL)) {
        this.researchDataURL = data().deepCopy(fields()[1].schema(), other.researchDataURL);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.researchDataLabel)) {
        this.researchDataLabel = data().deepCopy(fields()[2].schema(), other.researchDataLabel);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ResearchData instance
     * @param other The existing instance to copy.
     */
    private Builder(de.gerdiproject.store.data.model.ResearchData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.researchDataIdentifier)) {
        this.researchDataIdentifier = data().deepCopy(fields()[0].schema(), other.researchDataIdentifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.researchDataURL)) {
        this.researchDataURL = data().deepCopy(fields()[1].schema(), other.researchDataURL);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.researchDataLabel)) {
        this.researchDataLabel = data().deepCopy(fields()[2].schema(), other.researchDataLabel);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'researchDataIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getResearchDataIdentifier() {
      return researchDataIdentifier;
    }

    /**
      * Sets the value of the 'researchDataIdentifier' field.
      * @param value The value of 'researchDataIdentifier'.
      * @return This builder.
      */
    public de.gerdiproject.store.data.model.ResearchData.Builder setResearchDataIdentifier(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.researchDataIdentifier = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'researchDataIdentifier' field has been set.
      * @return True if the 'researchDataIdentifier' field has been set, false otherwise.
      */
    public boolean hasResearchDataIdentifier() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'researchDataIdentifier' field.
      * @return This builder.
      */
    public de.gerdiproject.store.data.model.ResearchData.Builder clearResearchDataIdentifier() {
      researchDataIdentifier = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'researchDataURL' field.
      * @return The value.
      */
    public java.lang.CharSequence getResearchDataURL() {
      return researchDataURL;
    }

    /**
      * Sets the value of the 'researchDataURL' field.
      * @param value The value of 'researchDataURL'.
      * @return This builder.
      */
    public de.gerdiproject.store.data.model.ResearchData.Builder setResearchDataURL(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.researchDataURL = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'researchDataURL' field has been set.
      * @return True if the 'researchDataURL' field has been set, false otherwise.
      */
    public boolean hasResearchDataURL() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'researchDataURL' field.
      * @return This builder.
      */
    public de.gerdiproject.store.data.model.ResearchData.Builder clearResearchDataURL() {
      researchDataURL = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'researchDataLabel' field.
      * @return The value.
      */
    public java.lang.CharSequence getResearchDataLabel() {
      return researchDataLabel;
    }

    /**
      * Sets the value of the 'researchDataLabel' field.
      * @param value The value of 'researchDataLabel'.
      * @return This builder.
      */
    public de.gerdiproject.store.data.model.ResearchData.Builder setResearchDataLabel(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.researchDataLabel = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'researchDataLabel' field has been set.
      * @return True if the 'researchDataLabel' field has been set, false otherwise.
      */
    public boolean hasResearchDataLabel() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'researchDataLabel' field.
      * @return This builder.
      */
    public de.gerdiproject.store.data.model.ResearchData.Builder clearResearchDataLabel() {
      researchDataLabel = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ResearchData build() {
      try {
        ResearchData record = new ResearchData();
        record.researchDataIdentifier = fieldSetFlags()[0] ? this.researchDataIdentifier : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.researchDataURL = fieldSetFlags()[1] ? this.researchDataURL : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.researchDataLabel = fieldSetFlags()[2] ? this.researchDataLabel : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ResearchData>
    WRITER$ = (org.apache.avro.io.DatumWriter<ResearchData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ResearchData>
    READER$ = (org.apache.avro.io.DatumReader<ResearchData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
